Архитектура платформы
========================================

Платформа Vostok построена на базе технологии распределенного реестра, обеспечивающего необ¬ходимый уровень согласованности и доступности данных, а также устойчивости к злонамерен¬ному изменению информации.
Vostok использует язык программирования Scala и имеет модульную архитектуру, что позволяет гибко подстраивать приложение под потребности бизнеса.
Наша платформа поддерживает алгоритмы консенсуса Proof-of-Stake и Proof-of-Authority. 
Таким образом можно создать такую конфигурацию сети, в которой основная блокчейн-цепочка, предназначенная для анкоринга данных из сайдчейнов, базируется на алгоритме консенсуса Proof-of-Stake, в тоже время корпоративные сайдчейны, в которых нет необходимости создания токенов, используют алгоритм Proof-of-Authority. Поскольку, алгоритм Proof-of-Authority создает экономичную модель, основанную на запасах токенов VST, то разделяя прибыль от обслуживания такой сети валидирующие узлы заинтересованы в ее поддержке.
Сайдчейны встраиваются в основную цепочку с помощью механизма анкоринга (помещая криптографические доказательства транзакций в основную блокчейн-сеть).

Топология сети, включающая основную цепочку и сайдчейны, представлена на схеме 
 
.. image:: img/architecture-sidechains.png

Архитектура ноды
----------------------
 
 .. image:: img/architecture-node-1.png

- Node API – интерфейс REST API ноды, позволяющий получать данные из блокчейна, подписывать и отправлять транзакции (с помощью API можно реализовать кошелек или сервис нотариата);
- Node storage – компонент системы, обеспечивающий хранение полного журнала транзакций и состояния блокчейна;
- Unconfirmed transaction pool – компонент, обеспечивающий хранение неподтвержденных транзакций до момента проверки и отправки их в блокчейн;
- Consensus and cryptolibraries – модули, отвечающие за механизм достижения согласия между узлами в сети и криптографические алгоритмы;
- KeyStore - специализированное хранилище приватных ключей, которое используется нодой для валидации, подписания данных и шифрования;
- Miner – компонент, отвечающий за упорядочивание и включение транзакций в блок;
- Network layer – слой логики, обеспечивающий сетевой протокол для взаимодействия нод;
- Smart-contract environment – среда для выполнения Тьюринг-полных смарт-контрактов;
- Validation logic – слой логики, содержащий правила проверки транзакций;
- Config – конфигурационные параметры ноды;
- Monitoring Service – сервис мониторинга и базой для хранения данных.

Дополнительные сервисы
----------------------------

.. image:: img/architecture-client-1.png
 
- Vostok corporate client – корпоративный клиент, предоставляющий средства для управления сетью и взаимодействия с блокчейном. Подробные сведения о клиенте приведены в разделе
- Data service – сервис, агрегирующий данные из блокчейна и предоставляющий возможность построения различных аналитик посредством SQL запросов;
- Node tools – набор утилит, автоматизирующих процессы управления ключами в keystore ноды, генерации транзакций и подписания genesis-блока;
- Authorization service – сервис авторизации для компонентов системы;
- Docker registry – сервис для хранения и управления образами смарт-контрактов.